pipeline {
    // Definition of env variables that can be used throughout the pipeline job
    environment {
        // Github data
        String gitUrl = "https://github.com/matabot/lkwdtest.git"
        
        // Unity tool installation
        UNITY_EXECUTABLE = "/var/Unity/Unity.app"

        // Unity Build params
        BUILD_NAME = "Android-${currentBuild.number}"
        String buildTarget = "Android"
        String outputFolder = "CurrentBuild"

        // PARAMETERS DATA
        IS_DEVELOPMENT_BUILD = "${params.developmentBuild}"

        // Add other EnvVars here
    }
    
    // Options: add timestamp to job logs and limiting the number of builds to be kept.
    options {
        timestamps()
        buildDiscarder(logRotator(numToKeepStr: "10"))
    }
    
    // Variable inputs that modify the behavior of the job
    parameters {
        string(name: 'gitBranch', defaultValue: 'development', description: 'Set the branch.')
        booleanParam(name: 'developmentBuild', defaultValue: true, description: 'Choose the buildType.')
    }
    
    // Tag Selector of the agent that will run the build job
    agent {
        node {
            // Jenkins node to be used must have the label android
            label "android"
        }
    }
    
    // The stages necessary to generate the desired build
    stages {
        stage('Git Pull') {
            steps {
                script {
                    echo "Git pull repo"
                    try {
                        // Check if the branch exists before attempting to pull
                        def branchExists = sh(script: "git ls-remote --heads ${gitUrl} ${params.gitBranch}", returnStatus: true) == 0
                        if (branchExists) {
                            //git url: "${gitUrl}", branch: "${params.gitBranch}", credentialsId: "${gitCredentials}"
                            git url: "${gitUrl}", branch: "${params.gitBranch}"
                        } else {
                            error("The branch '${params.gitBranch}' does not exist in the repository.")
                        }
                    } catch (Exception e) {
                        currentBuild.result = 'FAILED'
                        echo "JOB FAILED: Failed to pull Git repository - ${e.message}"
                        error("Failed to pull Git repository")
                    }
                }
            }
        }
        
        stage('Build Application') {
            steps {
                script {
                    echo "Create Application output folder..."
                    if (isUnix()) {
                        sh "mkdir -p ${outputFolder}"
                    } else {
                        bat "mkdir ${outputFolder}"
                    }
                    
                    echo "Build App..."
            
                        bat "\"${UNITY_EXECUTABLE}\" -projectPath %CD% -quit -batchmode -nographics -buildTarget %buildTarget% -customBuildPath %CD%\\${outputFolder}\\ -customBuildName %BUILD_NAME% -executeMethod BuildAndroid.Build"
                    
                }
            }
        }
    }
}
